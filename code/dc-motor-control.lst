

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 17 10:59:50 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0006                     _PORTB	set	6
   205  0008                     _PORTD	set	8
   206  001E                     _ADRESH	set	30
   207  001F                     _ADCON0	set	31
   208  0086                     _TRISB	set	134
   209  009E                     _ADRESL	set	158
   210  0087                     _TRISC	set	135
   211  0088                     _TRISD	set	136
   212  009F                     _ADCON1	set	159
   213  0085                     _TRISA	set	133
   214  0189                     _ANSELH	set	393
   215  0188                     _ANSEL	set	392
   216                           
   217                           	psect	cinit
   218  07F7                     start_initialization:	
   219                           ; #config settings
   220                           
   221  07F7                     __initialization:	
   222                           
   223                           ; Clear objects allocated to COMMON
   224  07F7  01F8               	clrf	__pbssCOMMON& (0+127)
   225  07F8  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   226  07F9  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   227  07FA  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   228  07FB  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   229  07FC                     end_of_initialization:	
   230                           ;End of C runtime variable initialization code
   231                           
   232  07FC                     __end_of__initialization:	
   233  07FC  0183               	clrf	3
   234  07FD  120A  118A  2F6F   	ljmp	_main	;jump to C main() function
   235                           
   236                           	psect	bssCOMMON
   237  0078                     __pbssCOMMON:	
   238  0078                     _valor_f:	
   239  0078                     	ds	3
   240  007B                     _valor:	
   241  007B                     	ds	2
   242                           
   243                           	psect	cstackCOMMON
   244  0070                     __pcstackCOMMON:	
   245  0070                     ?_lcd_init:	
   246  0070                     ?_lcd_data:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ??_lcd_data:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_lcd_cmd:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ??_lcd_cmd:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_main:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?___wmul:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ___wmul@multiplier:	
   265                           ; 2 bytes @ 0x0
   266                           
   267                           
   268                           ; 2 bytes @ 0x0
   269  0070                     	ds	2
   270  0072                     lcd_cmd@cmd:	
   271  0072                     lcd_data@low_nibble:	
   272                           ; 1 bytes @ 0x2
   273                           
   274  0072                     ___wmul@multiplicand:	
   275                           ; 1 bytes @ 0x2
   276                           
   277                           
   278                           ; 2 bytes @ 0x2
   279  0072                     	ds	1
   280  0073                     ??_lcd_init:	
   281  0073                     lcd_data@high_nibble:	
   282                           ; 1 bytes @ 0x3
   283                           
   284                           
   285                           ; 1 bytes @ 0x3
   286  0073                     	ds	1
   287  0074                     ??___wmul:	
   288  0074                     lcd_data@data:	
   289                           ; 1 bytes @ 0x4
   290                           
   291  0074                     ___wmul@product:	
   292                           ; 1 bytes @ 0x4
   293                           
   294                           
   295                           ; 2 bytes @ 0x4
   296  0074                     	ds	2
   297  0076                     ??_main:	
   298                           
   299                           ; 1 bytes @ 0x6
   300  0076                     	ds	2
   301                           
   302                           	psect	maintext
   303  076F                     __pmaintext:	
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 10 in file "C:\Users\PC-09\Desktop\PortableGit\ecai11\dc-motor-control\code\main.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;		None
   314 ;; Return value:  Size  Location     Type
   315 ;;                  1    wreg      void 
   316 ;; Registers used:
   317 ;;		wreg, status,2, status,0, pclath, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : B00/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   323 ;;      Params:         0       0       0       0       0
   324 ;;      Locals:         0       0       0       0       0
   325 ;;      Temps:          2       0       0       0       0
   326 ;;      Totals:         2       0       0       0       0
   327 ;;Total ram usage:        2 bytes
   328 ;; Hardware stack levels required when called:    2
   329 ;; This function calls:
   330 ;;		___wmul
   331 ;;		_lcd_data
   332 ;;		_lcd_init
   333 ;; This function is called by:
   334 ;;		Startup code after reset
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           
   339                           ;psect for function _main
   340  076F                     _main:	
   341                           
   342                           ;main.c: 13: TRISA |= (1<<0);
   343                           
   344                           ;incstack = 0
   345                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   346  076F  1683               	bsf	3,5	;RP0=1, select bank1
   347  0770  1303               	bcf	3,6	;RP1=0, select bank1
   348  0771  1405               	bsf	5,0	;volatile
   349                           
   350                           ;main.c: 14: ANSEL |= (1<<0);
   351  0772  1683               	bsf	3,5	;RP0=1, select bank3
   352  0773  1703               	bsf	3,6	;RP1=1, select bank3
   353  0774  1408               	bsf	8,0	;volatile
   354                           
   355                           ;main.c: 16: ADCON0 = 0x00;
   356  0775  1283               	bcf	3,5	;RP0=0, select bank0
   357  0776  1303               	bcf	3,6	;RP1=0, select bank0
   358  0777  019F               	clrf	31	;volatile
   359                           
   360                           ;main.c: 17: ADCON0 |= 0b01000001;
   361  0778  3041               	movlw	65
   362  0779  00F6               	movwf	??_main
   363  077A  0876               	movf	??_main,w
   364  077B  049F               	iorwf	31,f	;volatile
   365                           
   366                           ;main.c: 19: ADCON1 = 0;
   367  077C  1683               	bsf	3,5	;RP0=1, select bank1
   368  077D  1303               	bcf	3,6	;RP1=0, select bank1
   369  077E  019F               	clrf	31	;volatile
   370                           
   371                           ;main.c: 20: ADCON1 |= (1<<7);
   372  077F  179F               	bsf	31,7	;volatile
   373                           
   374                           ;main.c: 21: TRISD = 0;
   375  0780  0188               	clrf	8	;volatile
   376                           
   377                           ;main.c: 22: TRISC = 0;
   378  0781  0187               	clrf	7	;volatile
   379                           
   380                           ;main.c: 23: _delay((unsigned long)((20)*(4000000/4000.0)));
   381  0782  301A               	movlw	26
   382  0783  00F7               	movwf	??_main+1
   383  0784  30F8               	movlw	248
   384  0785  00F6               	movwf	??_main
   385  0786                     u147:	
   386  0786  0BF6               	decfsz	??_main,f
   387  0787  2F86               	goto	u147
   388  0788  0BF7               	decfsz	??_main+1,f
   389  0789  2F86               	goto	u147
   390  078A  0000               	nop
   391                           
   392                           ;main.c: 24: lcd_init();
   393  078B  120A  118A  26E4  120A  118A  	fcall	_lcd_init
   394                           
   395                           ;main.c: 25: lcd_data(0x30);
   396  0790  3030               	movlw	48
   397  0791  120A  118A  271C  120A  118A  	fcall	_lcd_data
   398                           
   399                           ;main.c: 26: lcd_data(0x33);
   400  0796  3033               	movlw	51
   401  0797  120A  118A  271C  120A  118A  	fcall	_lcd_data
   402                           
   403                           ;main.c: 27: lcd_data(0x32);
   404  079C  3032               	movlw	50
   405  079D  120A  118A  271C  120A  118A  	fcall	_lcd_data
   406                           
   407                           ;main.c: 28: lcd_data(0x31);
   408  07A2  3031               	movlw	49
   409  07A3  120A  118A  271C  120A  118A  	fcall	_lcd_data
   410                           
   411                           ;main.c: 29: lcd_data('0');
   412  07A8  3030               	movlw	48
   413  07A9  120A  118A  271C  120A  118A  	fcall	_lcd_data
   414                           
   415                           ;main.c: 30: lcd_data('3');
   416  07AE  3033               	movlw	51
   417  07AF  120A  118A  271C  120A  118A  	fcall	_lcd_data
   418                           
   419                           ;main.c: 31: lcd_data('2');
   420  07B4  3032               	movlw	50
   421  07B5  120A  118A  271C  120A  118A  	fcall	_lcd_data
   422                           
   423                           ;main.c: 32: lcd_data('1');
   424  07BA  3031               	movlw	49
   425  07BB  120A  118A  271C  120A  118A  	fcall	_lcd_data
   426                           
   427                           ;main.c: 33: lcd_data('A');
   428  07C0  3041               	movlw	65
   429  07C1  120A  118A  271C  120A  118A  	fcall	_lcd_data
   430  07C6                     l698:	
   431                           ;main.c: 35: while(1){
   432                           
   433                           
   434                           ;main.c: 37: ADCON0 |= (1<<1);
   435  07C6  1283               	bcf	3,5	;RP0=0, select bank0
   436  07C7  1303               	bcf	3,6	;RP1=0, select bank0
   437  07C8  149F               	bsf	31,1	;volatile
   438  07C9                     l34:	
   439                           ;main.c: 38: while( ADCON0 & (1<<1));
   440                           
   441  07C9  189F               	btfsc	31,1	;volatile
   442  07CA  2FC9               	goto	l34
   443                           
   444                           ;main.c: 39: valor = (ADRESH<<8) + ADRESL;
   445  07CB  081E               	movf	30,w	;volatile
   446  07CC  00FC               	movwf	_valor+1
   447  07CD  1683               	bsf	3,5	;RP0=1, select bank1
   448  07CE  1303               	bcf	3,6	;RP1=0, select bank1
   449  07CF  081E               	movf	30,w	;volatile
   450  07D0  00FB               	movwf	_valor
   451                           
   452                           ;main.c: 40: valor = valor*5;
   453  07D1  087C               	movf	_valor+1,w
   454  07D2  00F1               	movwf	___wmul@multiplier+1
   455  07D3  087B               	movf	_valor,w
   456  07D4  00F0               	movwf	___wmul@multiplier
   457  07D5  3005               	movlw	5
   458  07D6  00F2               	movwf	___wmul@multiplicand
   459  07D7  3000               	movlw	0
   460  07D8  00F3               	movwf	___wmul@multiplicand+1
   461  07D9  120A  118A  26A0  120A  118A  	fcall	___wmul
   462  07DE  0871               	movf	?___wmul+1,w
   463  07DF  00FC               	movwf	_valor+1
   464  07E0  0870               	movf	?___wmul,w
   465  07E1  00FB               	movwf	_valor
   466                           
   467                           ;main.c: 41: if (valor > 2000){
   468  07E2  3007               	movlw	7
   469  07E3  027C               	subwf	_valor+1,w
   470  07E4  30D1               	movlw	209
   471  07E5  1903               	skipnz
   472  07E6  027B               	subwf	_valor,w
   473  07E7  1C03               	skipc
   474  07E8  2FED               	goto	l708
   475                           
   476                           ;main.c: 42: PORTD |= (1<<0);
   477  07E9  1283               	bcf	3,5	;RP0=0, select bank0
   478  07EA  1303               	bcf	3,6	;RP1=0, select bank0
   479  07EB  1408               	bsf	8,0	;volatile
   480                           
   481                           ;main.c: 43: } else {
   482  07EC  2FF3               	goto	l710
   483  07ED                     l708:	
   484                           
   485                           ;main.c: 44: PORTD &= ~(1<<0);
   486  07ED  30FE               	movlw	254
   487  07EE  00F6               	movwf	??_main
   488  07EF  0876               	movf	??_main,w
   489  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   490  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   491  07F2  0588               	andwf	8,f	;volatile
   492  07F3                     l710:	
   493                           
   494                           ;main.c: 45: }
   495                           ;main.c: 46: _delay((unsigned long)((5)*(4000000/4000000.0)));
   496  07F3  2FF4               	nop2	;2 cycle nop
   497  07F4  2FF5               	nop2	;2 cycle nop
   498  07F5  0000               	nop
   499  07F6  2FC6               	goto	l698
   500  07F7                     __end_of_main:	
   501                           
   502                           	psect	text1
   503  06E4                     __ptext1:	
   504 ;; *************** function _lcd_init *****************
   505 ;; Defined at:
   506 ;;		line 3 in file "C:\Users\PC-09\Desktop\PortableGit\ecai11\dc-motor-control\code\lcd.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      unsigned char 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, pclath, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   520 ;;      Params:         0       0       0       0       0
   521 ;;      Locals:         0       0       0       0       0
   522 ;;      Temps:          2       0       0       0       0
   523 ;;      Totals:         2       0       0       0       0
   524 ;;Total ram usage:        2 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; Hardware stack levels required when called:    1
   527 ;; This function calls:
   528 ;;		_lcd_cmd
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           
   535                           ;psect for function _lcd_init
   536  06E4                     _lcd_init:	
   537                           
   538                           ;lcd.c: 5: _delay((unsigned long)((40)*(4000000/4000.0)));
   539                           
   540                           ;incstack = 0
   541                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   542  06E4  3034               	movlw	52
   543  06E5  00F4               	movwf	??_lcd_init+1
   544  06E6  30F1               	movlw	241
   545  06E7  00F3               	movwf	??_lcd_init
   546  06E8                     u157:	
   547  06E8  0BF3               	decfsz	??_lcd_init,f
   548  06E9  2EE8               	goto	u157
   549  06EA  0BF4               	decfsz	??_lcd_init+1,f
   550  06EB  2EE8               	goto	u157
   551  06EC  2EED               	nop2
   552                           
   553                           ;lcd.c: 6: TRISB = 0x00;
   554  06ED  1683               	bsf	3,5	;RP0=1, select bank1
   555  06EE  1303               	bcf	3,6	;RP1=0, select bank1
   556  06EF  0186               	clrf	6	;volatile
   557                           
   558                           ;lcd.c: 7: ANSELH = 0x00;
   559  06F0  1683               	bsf	3,5	;RP0=1, select bank3
   560  06F1  1703               	bsf	3,6	;RP1=1, select bank3
   561  06F2  0189               	clrf	9	;volatile
   562                           
   563                           ;lcd.c: 8: lcd_cmd(0x02);
   564  06F3  3002               	movlw	2
   565  06F4  120A  118A  26C1  120A  118A  	fcall	_lcd_cmd
   566                           
   567                           ;lcd.c: 9: lcd_cmd(0x02);
   568  06F9  3002               	movlw	2
   569  06FA  120A  118A  26C1  120A  118A  	fcall	_lcd_cmd
   570                           
   571                           ;lcd.c: 10: lcd_cmd(0x00);
   572  06FF  3000               	movlw	0
   573  0700  120A  118A  26C1  120A  118A  	fcall	_lcd_cmd
   574                           
   575                           ;lcd.c: 11: lcd_cmd(0x00);
   576  0705  3000               	movlw	0
   577  0706  120A  118A  26C1  120A  118A  	fcall	_lcd_cmd
   578                           
   579                           ;lcd.c: 12: lcd_cmd(0x0C);
   580  070B  300C               	movlw	12
   581  070C  120A  118A  26C1  120A  118A  	fcall	_lcd_cmd
   582                           
   583                           ;lcd.c: 13: lcd_cmd(0x00);
   584  0711  3000               	movlw	0
   585  0712  120A  118A  26C1  120A  118A  	fcall	_lcd_cmd
   586                           
   587                           ;lcd.c: 14: lcd_cmd(0x06);
   588  0717  3006               	movlw	6
   589  0718  120A  118A  26C1   	fcall	_lcd_cmd
   590  071B  0008               	return
   591  071C                     __end_of_lcd_init:	
   592                           ;lcd.c: 31: return 0;
   593                           ;	Return value of _lcd_init is never used
   594                           
   595                           
   596                           	psect	text2
   597  06C1                     __ptext2:	
   598 ;; *************** function _lcd_cmd *****************
   599 ;; Defined at:
   600 ;;		line 36 in file "C:\Users\PC-09\Desktop\PortableGit\ecai11\dc-motor-control\code\lcd.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;  cmd             1    wreg     unsigned char 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  cmd             1    2[COMMON] unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      unsigned char 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   614 ;;      Params:         0       0       0       0       0
   615 ;;      Locals:         1       0       0       0       0
   616 ;;      Temps:          2       0       0       0       0
   617 ;;      Totals:         3       0       0       0       0
   618 ;;Total ram usage:        3 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; This function calls:
   621 ;;		Nothing
   622 ;; This function is called by:
   623 ;;		_lcd_init
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           
   628                           ;psect for function _lcd_cmd
   629  06C1                     _lcd_cmd:	
   630                           
   631                           ;incstack = 0
   632                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0]
   633                           ;lcd_cmd@cmd stored from wreg
   634  06C1  00F2               	movwf	lcd_cmd@cmd
   635                           
   636                           ;lcd.c: 38: PORTB = cmd;
   637  06C2  0872               	movf	lcd_cmd@cmd,w
   638  06C3  1283               	bcf	3,5	;RP0=0, select bank0
   639  06C4  1303               	bcf	3,6	;RP1=0, select bank0
   640  06C5  0086               	movwf	6	;volatile
   641                           
   642                           ;lcd.c: 39: PORTB &= ~(1<<4);
   643  06C6  30EF               	movlw	239
   644  06C7  00F0               	movwf	??_lcd_cmd
   645  06C8  0870               	movf	??_lcd_cmd,w
   646  06C9  0586               	andwf	6,f	;volatile
   647                           
   648                           ;lcd.c: 40: PORTB |= (1<<5);
   649  06CA  1686               	bsf	6,5	;volatile
   650                           
   651                           ;lcd.c: 41: _delay((unsigned long)((2)*(4000000/4000.0)));
   652  06CB  3003               	movlw	3
   653  06CC  00F1               	movwf	??_lcd_cmd+1
   654  06CD  3097               	movlw	151
   655  06CE  00F0               	movwf	??_lcd_cmd
   656  06CF                     u167:	
   657  06CF  0BF0               	decfsz	??_lcd_cmd,f
   658  06D0  2ECF               	goto	u167
   659  06D1  0BF1               	decfsz	??_lcd_cmd+1,f
   660  06D2  2ECF               	goto	u167
   661  06D3  2ED4               	nop2
   662                           
   663                           ;lcd.c: 42: PORTB &= ~(1<<5);
   664  06D4  30DF               	movlw	223
   665  06D5  00F0               	movwf	??_lcd_cmd
   666  06D6  0870               	movf	??_lcd_cmd,w
   667  06D7  1283               	bcf	3,5	;RP0=0, select bank0
   668  06D8  1303               	bcf	3,6	;RP1=0, select bank0
   669  06D9  0586               	andwf	6,f	;volatile
   670                           
   671                           ;lcd.c: 43: _delay((unsigned long)((2)*(4000000/4000.0)));
   672  06DA  3003               	movlw	3
   673  06DB  00F1               	movwf	??_lcd_cmd+1
   674  06DC  3097               	movlw	151
   675  06DD  00F0               	movwf	??_lcd_cmd
   676  06DE                     u177:	
   677  06DE  0BF0               	decfsz	??_lcd_cmd,f
   678  06DF  2EDE               	goto	u177
   679  06E0  0BF1               	decfsz	??_lcd_cmd+1,f
   680  06E1  2EDE               	goto	u177
   681  06E2  2EE3               	nop2
   682  06E3  0008               	return
   683  06E4                     __end_of_lcd_cmd:	
   684                           ;lcd.c: 44: return 0;
   685                           ;	Return value of _lcd_cmd is never used
   686                           
   687                           
   688                           	psect	text3
   689  071C                     __ptext3:	
   690 ;; *************** function _lcd_data *****************
   691 ;; Defined at:
   692 ;;		line 48 in file "C:\Users\PC-09\Desktop\PortableGit\ecai11\dc-motor-control\code\lcd.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;  data            1    wreg     unsigned char 
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  data            1    4[COMMON] unsigned char 
   697 ;;  high_nibble     1    3[COMMON] unsigned char 
   698 ;;  low_nibble      1    2[COMMON] unsigned char 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      unsigned char 
   701 ;; Registers used:
   702 ;;		wreg, status,2, status,0
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   708 ;;      Params:         0       0       0       0       0
   709 ;;      Locals:         3       0       0       0       0
   710 ;;      Temps:          2       0       0       0       0
   711 ;;      Totals:         5       0       0       0       0
   712 ;;Total ram usage:        5 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; This function calls:
   715 ;;		Nothing
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           
   722                           ;psect for function _lcd_data
   723  071C                     _lcd_data:	
   724                           
   725                           ;incstack = 0
   726                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
   727                           ;lcd_data@data stored from wreg
   728  071C  00F4               	movwf	lcd_data@data
   729                           
   730                           ;lcd.c: 50: uint8_t high_nibble;
   731                           ;lcd.c: 51: uint8_t low_nibble;
   732                           ;lcd.c: 53: high_nibble = data >> 4;
   733  071D  0874               	movf	lcd_data@data,w
   734  071E  00F0               	movwf	??_lcd_data
   735  071F  3004               	movlw	4
   736  0720                     u15:	
   737  0720  1003               	clrc
   738  0721  0CF0               	rrf	??_lcd_data,f
   739  0722  3EFF               	addlw	-1
   740  0723  1D03               	skipz
   741  0724  2F20               	goto	u15
   742  0725  0870               	movf	??_lcd_data,w
   743  0726  00F1               	movwf	??_lcd_data+1
   744  0727  0871               	movf	??_lcd_data+1,w
   745  0728  00F3               	movwf	lcd_data@high_nibble
   746                           
   747                           ;lcd.c: 54: high_nibble &= 0x0F;
   748  0729  300F               	movlw	15
   749  072A  00F0               	movwf	??_lcd_data
   750  072B  0870               	movf	??_lcd_data,w
   751  072C  05F3               	andwf	lcd_data@high_nibble,f
   752                           
   753                           ;lcd.c: 56: low_nibble = data & 0x0F;
   754  072D  0874               	movf	lcd_data@data,w
   755  072E  390F               	andlw	15
   756  072F  00F0               	movwf	??_lcd_data
   757  0730  0870               	movf	??_lcd_data,w
   758  0731  00F2               	movwf	lcd_data@low_nibble
   759                           
   760                           ;lcd.c: 57: PORTB = high_nibble;
   761  0732  0873               	movf	lcd_data@high_nibble,w
   762  0733  1283               	bcf	3,5	;RP0=0, select bank0
   763  0734  1303               	bcf	3,6	;RP1=0, select bank0
   764  0735  0086               	movwf	6	;volatile
   765                           
   766                           ;lcd.c: 58: PORTB |= (1<<4);
   767  0736  1606               	bsf	6,4	;volatile
   768                           
   769                           ;lcd.c: 59: PORTB |= (1<<5);
   770  0737  1686               	bsf	6,5	;volatile
   771                           
   772                           ;lcd.c: 60: _delay((unsigned long)((2)*(4000000/4000.0)));
   773  0738  3003               	movlw	3
   774  0739  00F1               	movwf	??_lcd_data+1
   775  073A  3097               	movlw	151
   776  073B  00F0               	movwf	??_lcd_data
   777  073C                     u187:	
   778  073C  0BF0               	decfsz	??_lcd_data,f
   779  073D  2F3C               	goto	u187
   780  073E  0BF1               	decfsz	??_lcd_data+1,f
   781  073F  2F3C               	goto	u187
   782  0740  2F41               	nop2
   783                           
   784                           ;lcd.c: 61: PORTB &= ~(1<<5);
   785  0741  30DF               	movlw	223
   786  0742  00F0               	movwf	??_lcd_data
   787  0743  0870               	movf	??_lcd_data,w
   788  0744  1283               	bcf	3,5	;RP0=0, select bank0
   789  0745  1303               	bcf	3,6	;RP1=0, select bank0
   790  0746  0586               	andwf	6,f	;volatile
   791                           
   792                           ;lcd.c: 62: _delay((unsigned long)((2)*(4000000/4000.0)));
   793  0747  3003               	movlw	3
   794  0748  00F1               	movwf	??_lcd_data+1
   795  0749  3097               	movlw	151
   796  074A  00F0               	movwf	??_lcd_data
   797  074B                     u197:	
   798  074B  0BF0               	decfsz	??_lcd_data,f
   799  074C  2F4B               	goto	u197
   800  074D  0BF1               	decfsz	??_lcd_data+1,f
   801  074E  2F4B               	goto	u197
   802  074F  2F50               	nop2
   803                           
   804                           ;lcd.c: 64: PORTB = low_nibble;
   805  0750  0872               	movf	lcd_data@low_nibble,w
   806  0751  1283               	bcf	3,5	;RP0=0, select bank0
   807  0752  1303               	bcf	3,6	;RP1=0, select bank0
   808  0753  0086               	movwf	6	;volatile
   809                           
   810                           ;lcd.c: 65: PORTB |= (1<<4);
   811  0754  1606               	bsf	6,4	;volatile
   812                           
   813                           ;lcd.c: 66: PORTB |= (1<<5);
   814  0755  1686               	bsf	6,5	;volatile
   815                           
   816                           ;lcd.c: 67: _delay((unsigned long)((2)*(4000000/4000.0)));
   817  0756  3003               	movlw	3
   818  0757  00F1               	movwf	??_lcd_data+1
   819  0758  3097               	movlw	151
   820  0759  00F0               	movwf	??_lcd_data
   821  075A                     u207:	
   822  075A  0BF0               	decfsz	??_lcd_data,f
   823  075B  2F5A               	goto	u207
   824  075C  0BF1               	decfsz	??_lcd_data+1,f
   825  075D  2F5A               	goto	u207
   826  075E  2F5F               	nop2
   827                           
   828                           ;lcd.c: 68: PORTB &= ~(1<<5);
   829  075F  30DF               	movlw	223
   830  0760  00F0               	movwf	??_lcd_data
   831  0761  0870               	movf	??_lcd_data,w
   832  0762  1283               	bcf	3,5	;RP0=0, select bank0
   833  0763  1303               	bcf	3,6	;RP1=0, select bank0
   834  0764  0586               	andwf	6,f	;volatile
   835                           
   836                           ;lcd.c: 69: _delay((unsigned long)((2)*(4000000/4000.0)));
   837  0765  3003               	movlw	3
   838  0766  00F1               	movwf	??_lcd_data+1
   839  0767  3097               	movlw	151
   840  0768  00F0               	movwf	??_lcd_data
   841  0769                     u217:	
   842  0769  0BF0               	decfsz	??_lcd_data,f
   843  076A  2F69               	goto	u217
   844  076B  0BF1               	decfsz	??_lcd_data+1,f
   845  076C  2F69               	goto	u217
   846  076D  2F6E               	nop2
   847  076E  0008               	return
   848  076F                     __end_of_lcd_data:	
   849                           ;lcd.c: 71: return 0;
   850                           ;	Return value of _lcd_data is never used
   851                           
   852                           
   853                           	psect	text4
   854  06A0                     __ptext4:	
   855 ;; *************** function ___wmul *****************
   856 ;; Defined at:
   857 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  multiplier      2    0[COMMON] unsigned int 
   860 ;;  multiplicand    2    2[COMMON] unsigned int 
   861 ;; Auto vars:     Size  Location     Type
   862 ;;  product         2    4[COMMON] unsigned int 
   863 ;; Return value:  Size  Location     Type
   864 ;;                  2    0[COMMON] unsigned int 
   865 ;; Registers used:
   866 ;;		wreg, status,2, status,0
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   872 ;;      Params:         4       0       0       0       0
   873 ;;      Locals:         2       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0
   875 ;;      Totals:         6       0       0       0       0
   876 ;;Total ram usage:        6 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function ___wmul
   887  06A0                     ___wmul:	
   888                           
   889                           ;incstack = 0
   890                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   891  06A0  01F4               	clrf	___wmul@product
   892  06A1  01F5               	clrf	___wmul@product+1
   893  06A2                     l650:	
   894  06A2  1C70               	btfss	___wmul@multiplier,0
   895  06A3  2EAA               	goto	l144
   896  06A4  0872               	movf	___wmul@multiplicand,w
   897  06A5  07F4               	addwf	___wmul@product,f
   898  06A6  1803               	skipnc
   899  06A7  0AF5               	incf	___wmul@product+1,f
   900  06A8  0873               	movf	___wmul@multiplicand+1,w
   901  06A9  07F5               	addwf	___wmul@product+1,f
   902  06AA                     l144:	
   903  06AA  3001               	movlw	1
   904  06AB                     u95:	
   905  06AB  1003               	clrc
   906  06AC  0DF2               	rlf	___wmul@multiplicand,f
   907  06AD  0DF3               	rlf	___wmul@multiplicand+1,f
   908  06AE  3EFF               	addlw	-1
   909  06AF  1D03               	skipz
   910  06B0  2EAB               	goto	u95
   911  06B1  3001               	movlw	1
   912  06B2                     u105:	
   913  06B2  1003               	clrc
   914  06B3  0CF1               	rrf	___wmul@multiplier+1,f
   915  06B4  0CF0               	rrf	___wmul@multiplier,f
   916  06B5  3EFF               	addlw	-1
   917  06B6  1D03               	skipz
   918  06B7  2EB2               	goto	u105
   919  06B8  0870               	movf	___wmul@multiplier,w
   920  06B9  0471               	iorwf	___wmul@multiplier+1,w
   921  06BA  1D03               	btfss	3,2
   922  06BB  2EA2               	goto	l650
   923  06BC  0875               	movf	___wmul@product+1,w
   924  06BD  00F1               	movwf	?___wmul+1
   925  06BE  0874               	movf	___wmul@product,w
   926  06BF  00F0               	movwf	?___wmul
   927  06C0  0008               	return
   928  06C1                     __end_of___wmul:	
   929  007E                     btemp	set	126	;btemp
   930  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___wmul
    _lcd_init->_lcd_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     273
                                              6 COMMON     2     2      0
                             ___wmul
                           _lcd_data
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      15
                                              3 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             5     5      0      60
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _lcd_data
   _lcd_init
     _lcd_cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       D      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 17 10:59:50 2020

           lcd_data@data 0074                       l34 07C9                       u15 0720  
                     u95 06AB      ___wmul@multiplicand 0072                      l144 06AA  
                    l710 07F3                      l650 06A2                      l708 07ED  
                    l698 07C6                      u105 06B2                      u207 075A  
                    u217 0769                      u147 0786                      u157 06E8  
                    u167 06CF                      u177 06DE                      u187 073C  
                    u197 074B      lcd_data@high_nibble 0073                     _main 076F  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _ANSEL 0188                    _PORTB 0006                    _PORTD 0008  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088          __end_of_lcd_cmd 06E4                    _valor 007B  
                  status 0003                    wtemp0 007E          __initialization 07F7  
           __end_of_main 07F7                   ??_main 0076                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
                 _ANSELH 0189         __end_of_lcd_data 076F         __end_of_lcd_init 071C  
                 ___wmul 06A0                ??_lcd_cmd 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 076F                  ?___wmul 0070  
              ?_lcd_data 0070                ?_lcd_init 0070          __size_of___wmul 0021  
                __ptext1 06E4                  __ptext2 06C1                  __ptext3 071C  
                __ptext4 06A0                  _lcd_cmd 06C1                  _valor_f 0078  
             ??_lcd_data 0070               ??_lcd_init 0073     end_of_initialization 07FC  
             lcd_cmd@cmd 0072           __end_of___wmul 06C1      start_initialization 07F7  
               ??___wmul 0074       lcd_data@low_nibble 0072              __pbssCOMMON 0078  
              ___latbits 0002        __size_of_lcd_data 0053        __size_of_lcd_init 0038  
               ?_lcd_cmd 0070           ___wmul@product 0074        ___wmul@multiplier 0070  
       __size_of_lcd_cmd 0023                 _lcd_data 071C                 _lcd_init 06E4  
          __size_of_main 0088  
