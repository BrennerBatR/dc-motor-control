

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 18 10:53:04 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.45
    17                           ; Generated 16/11/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  0105                     	;# 
   114  0107                     	;# 
   115  0108                     	;# 
   116  0109                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0185                     	;# 
   123  0187                     	;# 
   124  0188                     	;# 
   125  0189                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  0081                     	;# 
   164  0085                     	;# 
   165  0086                     	;# 
   166  0087                     	;# 
   167  0088                     	;# 
   168  0089                     	;# 
   169  008C                     	;# 
   170  008D                     	;# 
   171  008E                     	;# 
   172  008F                     	;# 
   173  0090                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0095                     	;# 
   181  0096                     	;# 
   182  0097                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009A                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  0105                     	;# 
   192  0107                     	;# 
   193  0108                     	;# 
   194  0109                     	;# 
   195  010C                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  0185                     	;# 
   201  0187                     	;# 
   202  0188                     	;# 
   203  0189                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  0006                     _PORTB	set	6
   207  0008                     _PORTD	set	8
   208  001E                     _ADRESH	set	30
   209  0015                     _CCPR1L	set	21
   210  0017                     _CCP1CON	set	23
   211  0012                     _T2CON	set	18
   212  001F                     _ADCON0	set	31
   213  0086                     _TRISB	set	134
   214  009E                     _ADRESL	set	158
   215  0092                     _PR2	set	146
   216  0087                     _TRISC	set	135
   217  0088                     _TRISD	set	136
   218  009F                     _ADCON1	set	159
   219  0085                     _TRISA	set	133
   220  0189                     _ANSELH	set	393
   221  0188                     _ANSEL	set	392
   222                           
   223                           	psect	cinit
   224  07F4                     start_initialization:	
   225                           ; #config settings
   226                           
   227  07F4                     __initialization:	
   228                           
   229                           ; Clear objects allocated to COMMON
   230  07F4  01F9               	clrf	__pbssCOMMON& (0+127)
   231  07F5  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   232  07F6  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   233                           
   234                           ; Clear objects allocated to BANK0
   235  07F7  1283               	bcf	3,5	;RP0=0, select bank0
   236  07F8  1303               	bcf	3,6	;RP1=0, select bank0
   237  07F9  01A0               	clrf	__pbssBANK0& (0+127)
   238  07FA  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   239  07FB  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   240  07FC                     end_of_initialization:	
   241                           ;End of C runtime variable initialization code
   242                           
   243  07FC                     __end_of__initialization:	
   244  07FC  0183               	clrf	3
   245  07FD  120A  118A  2F78   	ljmp	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMMON
   248  0079                     __pbssCOMMON:	
   249  0079                     _valor:	
   250  0079                     	ds	2
   251  007B                     _pos:	
   252  007B                     	ds	1
   253                           
   254                           	psect	bssBANK0
   255  0020                     __pbssBANK0:	
   256  0020                     _valor_f:	
   257  0020                     	ds	3
   258                           
   259                           	psect	cstackCOMMON
   260  0070                     __pcstackCOMMON:	
   261  0070                     ?_lcd_init:	
   262  0070                     ?_lcd_data:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ??_lcd_data:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_lcd_cmd:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ??_lcd_cmd:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_main:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?___wmul:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ___wmul@multiplier:	
   281                           ; 2 bytes @ 0x0
   282                           
   283                           
   284                           ; 2 bytes @ 0x0
   285  0070                     	ds	2
   286  0072                     lcd_cmd@cmd:	
   287  0072                     lcd_data@low_nibble:	
   288                           ; 1 bytes @ 0x2
   289                           
   290  0072                     ___wmul@multiplicand:	
   291                           ; 1 bytes @ 0x2
   292                           
   293                           
   294                           ; 2 bytes @ 0x2
   295  0072                     	ds	1
   296  0073                     ??_lcd_init:	
   297  0073                     ?_lcd_set_position:	
   298                           ; 1 bytes @ 0x3
   299                           
   300  0073                     lcd_data@high_nibble:	
   301                           ; 1 bytes @ 0x3
   302                           
   303  0073                     lcd_set_position@y:	
   304                           ; 1 bytes @ 0x3
   305                           
   306                           
   307                           ; 1 bytes @ 0x3
   308  0073                     	ds	1
   309  0074                     ??_lcd_set_position:	
   310  0074                     ??___wmul:	
   311                           ; 1 bytes @ 0x4
   312                           
   313  0074                     lcd_data@data:	
   314                           ; 1 bytes @ 0x4
   315                           
   316  0074                     ___wmul@product:	
   317                           ; 1 bytes @ 0x4
   318                           
   319                           
   320                           ; 2 bytes @ 0x4
   321  0074                     	ds	1
   322  0075                     lcd_set_position@x:	
   323                           
   324                           ; 1 bytes @ 0x5
   325  0075                     	ds	1
   326  0076                     lcd_set_position@pos:	
   327                           
   328                           ; 1 bytes @ 0x6
   329  0076                     	ds	1
   330  0077                     ??_main:	
   331                           
   332                           ; 1 bytes @ 0x7
   333  0077                     	ds	2
   334                           
   335                           	psect	maintext
   336  0778                     __pmaintext:	
   337 ;;
   338 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   339 ;;
   340 ;; *************** function _main *****************
   341 ;; Defined at:
   342 ;;		line 10 in file "C:\Users\Aluno\Desktop\PortableGit\ecai11\C\dc-motor-control\code\main.c"
   343 ;; Parameters:    Size  Location     Type
   344 ;;		None
   345 ;; Auto vars:     Size  Location     Type
   346 ;;		None
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, status,2, status,0, pclath, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : B00/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   356 ;;      Params:         0       0       0       0       0
   357 ;;      Locals:         0       0       0       0       0
   358 ;;      Temps:          2       0       0       0       0
   359 ;;      Totals:         2       0       0       0       0
   360 ;;Total ram usage:        2 bytes
   361 ;; Hardware stack levels required when called:    2
   362 ;; This function calls:
   363 ;;		___wmul
   364 ;;		_lcd_data
   365 ;;		_lcd_init
   366 ;;		_lcd_set_position
   367 ;; This function is called by:
   368 ;;		Startup code after reset
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           
   373                           ;psect for function _main
   374  0778                     _main:	
   375                           
   376                           ;main.c: 13: TRISA |= (1<<0);
   377                           
   378                           ;incstack = 0
   379                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   380  0778  1683               	bsf	3,5	;RP0=1, select bank1
   381  0779  1303               	bcf	3,6	;RP1=0, select bank1
   382  077A  1405               	bsf	5,0	;volatile
   383                           
   384                           ;main.c: 14: ANSEL |= (1<<0);
   385  077B  1683               	bsf	3,5	;RP0=1, select bank3
   386  077C  1703               	bsf	3,6	;RP1=1, select bank3
   387  077D  1408               	bsf	8,0	;volatile
   388                           
   389                           ;main.c: 16: ADCON0 = 0x00;
   390  077E  1283               	bcf	3,5	;RP0=0, select bank0
   391  077F  1303               	bcf	3,6	;RP1=0, select bank0
   392  0780  019F               	clrf	31	;volatile
   393                           
   394                           ;main.c: 17: ADCON0 |= 0b01000001;
   395  0781  3041               	movlw	65
   396  0782  00F7               	movwf	??_main
   397  0783  0877               	movf	??_main,w
   398  0784  049F               	iorwf	31,f	;volatile
   399                           
   400                           ;main.c: 19: ADCON1 = 0;
   401  0785  1683               	bsf	3,5	;RP0=1, select bank1
   402  0786  1303               	bcf	3,6	;RP1=0, select bank1
   403  0787  019F               	clrf	31	;volatile
   404                           
   405                           ;main.c: 20: ADCON1 |= (1<<7);
   406  0788  179F               	bsf	31,7	;volatile
   407                           
   408                           ;main.c: 21: TRISD = 0;
   409  0789  0188               	clrf	8	;volatile
   410                           
   411                           ;main.c: 22: TRISC = 0;
   412  078A  0187               	clrf	7	;volatile
   413                           
   414                           ;main.c: 23: _delay((unsigned long)((20)*(4000000/4000.0)));
   415  078B  301A               	movlw	26
   416  078C  00F8               	movwf	??_main+1
   417  078D  30F8               	movlw	248
   418  078E  00F7               	movwf	??_main
   419  078F                     u207:	
   420  078F  0BF7               	decfsz	??_main,f
   421  0790  2F8F               	goto	u207
   422  0791  0BF8               	decfsz	??_main+1,f
   423  0792  2F8F               	goto	u207
   424  0793  0000               	nop
   425                           
   426                           ;main.c: 24: lcd_init();
   427  0794  120A  118A  26B1  120A  118A  	fcall	_lcd_init
   428                           
   429                           ;main.c: 25: lcd_data(0x30);
   430  0799  3030               	movlw	48
   431  079A  120A  118A  2725  120A  118A  	fcall	_lcd_data
   432                           
   433                           ;main.c: 27: lcd_set_position(1,15);
   434  079F  300F               	movlw	15
   435  07A0  00F7               	movwf	??_main
   436  07A1  0877               	movf	??_main,w
   437  07A2  00F3               	movwf	lcd_set_position@y
   438  07A3  3001               	movlw	1
   439  07A4  120A  118A  26E9  120A  118A  	fcall	_lcd_set_position
   440                           
   441                           ;main.c: 28: lcd_data('A');
   442  07A9  3041               	movlw	65
   443  07AA  120A  118A  2725  120A  118A  	fcall	_lcd_data
   444                           
   445                           ;main.c: 32: TRISC &= ~(1<<2);
   446  07AF  30FB               	movlw	251
   447  07B0  00F7               	movwf	??_main
   448  07B1  0877               	movf	??_main,w
   449  07B2  1683               	bsf	3,5	;RP0=1, select bank1
   450  07B3  1303               	bcf	3,6	;RP1=0, select bank1
   451  07B4  0587               	andwf	7,f	;volatile
   452                           
   453                           ;main.c: 33: T2CON = 0B00000101;
   454  07B5  3005               	movlw	5
   455  07B6  1283               	bcf	3,5	;RP0=0, select bank0
   456  07B7  1303               	bcf	3,6	;RP1=0, select bank0
   457  07B8  0092               	movwf	18	;volatile
   458                           
   459                           ;main.c: 34: PR2 = 249;
   460  07B9  30F9               	movlw	249
   461  07BA  1683               	bsf	3,5	;RP0=1, select bank1
   462  07BB  1303               	bcf	3,6	;RP1=0, select bank1
   463  07BC  0092               	movwf	18	;volatile
   464                           
   465                           ;main.c: 35: CCP1CON = 0B00001100;
   466  07BD  300C               	movlw	12
   467  07BE  1283               	bcf	3,5	;RP0=0, select bank0
   468  07BF  1303               	bcf	3,6	;RP1=0, select bank0
   469  07C0  0097               	movwf	23	;volatile
   470                           
   471                           ;main.c: 36: CCPR1L = 500 >>2;
   472  07C1  307D               	movlw	125
   473  07C2  0095               	movwf	21	;volatile
   474  07C3                     l739:	
   475                           ;main.c: 39: while(1){
   476                           
   477                           
   478                           ;main.c: 41: ADCON0 |= (1<<1);
   479  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   480  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   481  07C5  149F               	bsf	31,1	;volatile
   482  07C6                     l44:	
   483                           ;main.c: 42: while( ADCON0 & (1<<1));
   484                           
   485  07C6  189F               	btfsc	31,1	;volatile
   486  07C7  2FC6               	goto	l44
   487                           
   488                           ;main.c: 43: valor = (ADRESH<<8) + ADRESL;
   489  07C8  081E               	movf	30,w	;volatile
   490  07C9  00FA               	movwf	_valor+1
   491  07CA  1683               	bsf	3,5	;RP0=1, select bank1
   492  07CB  1303               	bcf	3,6	;RP1=0, select bank1
   493  07CC  081E               	movf	30,w	;volatile
   494  07CD  00F9               	movwf	_valor
   495                           
   496                           ;main.c: 44: valor = valor*5;
   497  07CE  087A               	movf	_valor+1,w
   498  07CF  00F1               	movwf	___wmul@multiplier+1
   499  07D0  0879               	movf	_valor,w
   500  07D1  00F0               	movwf	___wmul@multiplier
   501  07D2  3005               	movlw	5
   502  07D3  00F2               	movwf	___wmul@multiplicand
   503  07D4  3000               	movlw	0
   504  07D5  00F3               	movwf	___wmul@multiplicand+1
   505  07D6  120A  118A  266D  120A  118A  	fcall	___wmul
   506  07DB  0871               	movf	?___wmul+1,w
   507  07DC  00FA               	movwf	_valor+1
   508  07DD  0870               	movf	?___wmul,w
   509  07DE  00F9               	movwf	_valor
   510                           
   511                           ;main.c: 45: if (valor > 2000){
   512  07DF  3007               	movlw	7
   513  07E0  027A               	subwf	_valor+1,w
   514  07E1  30D1               	movlw	209
   515  07E2  1903               	skipnz
   516  07E3  0279               	subwf	_valor,w
   517  07E4  1C03               	skipc
   518  07E5  2FEA               	goto	l749
   519                           
   520                           ;main.c: 46: PORTD |= (1<<0);
   521  07E6  1283               	bcf	3,5	;RP0=0, select bank0
   522  07E7  1303               	bcf	3,6	;RP1=0, select bank0
   523  07E8  1408               	bsf	8,0	;volatile
   524                           
   525                           ;main.c: 47: } else {
   526  07E9  2FF0               	goto	l751
   527  07EA                     l749:	
   528                           
   529                           ;main.c: 48: PORTD &= ~(1<<0);
   530  07EA  30FE               	movlw	254
   531  07EB  00F7               	movwf	??_main
   532  07EC  0877               	movf	??_main,w
   533  07ED  1283               	bcf	3,5	;RP0=0, select bank0
   534  07EE  1303               	bcf	3,6	;RP1=0, select bank0
   535  07EF  0588               	andwf	8,f	;volatile
   536  07F0                     l751:	
   537                           
   538                           ;main.c: 49: }
   539                           ;main.c: 50: _delay((unsigned long)((5)*(4000000/4000000.0)));
   540  07F0  2FF1               	nop2	;2 cycle nop
   541  07F1  2FF2               	nop2	;2 cycle nop
   542  07F2  0000               	nop
   543  07F3  2FC3               	goto	l739
   544  07F4                     __end_of_main:	
   545                           
   546                           	psect	text1
   547  06E9                     __ptext1:	
   548 ;; *************** function _lcd_set_position *****************
   549 ;; Defined at:
   550 ;;		line 59 in file "C:\Users\Aluno\Desktop\PortableGit\ecai11\C\dc-motor-control\code\lcd.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;  x               1    wreg     unsigned char 
   553 ;;  y               1    3[COMMON] unsigned char 
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  x               1    5[COMMON] unsigned char 
   556 ;;  pos             1    6[COMMON] unsigned char 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      unsigned char 
   559 ;; Registers used:
   560 ;;		wreg, status,2, status,0, pclath, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   566 ;;      Params:         1       0       0       0       0
   567 ;;      Locals:         2       0       0       0       0
   568 ;;      Temps:          1       0       0       0       0
   569 ;;      Totals:         4       0       0       0       0
   570 ;;Total ram usage:        4 bytes
   571 ;; Hardware stack levels used:    1
   572 ;; Hardware stack levels required when called:    1
   573 ;; This function calls:
   574 ;;		_lcd_cmd
   575 ;; This function is called by:
   576 ;;		_main
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           
   581                           ;psect for function _lcd_set_position
   582  06E9                     _lcd_set_position:	
   583                           
   584                           ;incstack = 0
   585                           ; Regs used in _lcd_set_position: [wreg+status,2+status,0+pclath+cstack]
   586                           ;lcd_set_position@x stored from wreg
   587  06E9  00F5               	movwf	lcd_set_position@x
   588                           
   589                           ;lcd.c: 61: uint8_t pos = 0;
   590  06EA  01F6               	clrf	lcd_set_position@pos
   591                           
   592                           ;lcd.c: 62: if ( x == 0 ){
   593  06EB  0875               	movf	lcd_set_position@x,w
   594  06EC  1D03               	btfss	3,2
   595  06ED  2F08               	goto	l689
   596                           
   597                           ;lcd.c: 63: pos = y;
   598  06EE  0873               	movf	lcd_set_position@y,w
   599  06EF  00F4               	movwf	??_lcd_set_position
   600  06F0  0874               	movf	??_lcd_set_position,w
   601  06F1  00F6               	movwf	lcd_set_position@pos
   602                           
   603                           ;lcd.c: 64: pos |= (1<<7);
   604  06F2  17F6               	bsf	lcd_set_position@pos,7
   605                           
   606                           ;lcd.c: 65: lcd_cmd((pos>>4)&0x0F);
   607  06F3  0876               	movf	lcd_set_position@pos,w
   608  06F4  00F4               	movwf	??_lcd_set_position
   609  06F5  3004               	movlw	4
   610  06F6                     u125:	
   611  06F6  1003               	clrc
   612  06F7  0CF4               	rrf	??_lcd_set_position,f
   613  06F8  3EFF               	addlw	-1
   614  06F9  1D03               	skipz
   615  06FA  2EF6               	goto	u125
   616  06FB  0874               	movf	??_lcd_set_position,w
   617  06FC  390F               	andlw	15
   618  06FD  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   619                           
   620                           ;lcd.c: 66: lcd_cmd(pos & 0x0F);
   621  0702  0876               	movf	lcd_set_position@pos,w
   622  0703  390F               	andlw	15
   623  0704  120A  118A  268E   	fcall	_lcd_cmd
   624                           
   625                           ;lcd.c: 67: } else {
   626  0707  0008               	return
   627  0708                     l689:	
   628                           
   629                           ;lcd.c: 68: pos = y;
   630  0708  0873               	movf	lcd_set_position@y,w
   631  0709  00F4               	movwf	??_lcd_set_position
   632  070A  0874               	movf	??_lcd_set_position,w
   633  070B  00F6               	movwf	lcd_set_position@pos
   634                           
   635                           ;lcd.c: 69: pos | = (0xC0);
   636  070C  30C0               	movlw	192
   637  070D  00F4               	movwf	??_lcd_set_position
   638  070E  0874               	movf	??_lcd_set_position,w
   639  070F  04F6               	iorwf	lcd_set_position@pos,f
   640                           
   641                           ;lcd.c: 70: lcd_cmd((pos>>4)&0x0F);
   642  0710  0876               	movf	lcd_set_position@pos,w
   643  0711  00F4               	movwf	??_lcd_set_position
   644  0712  3004               	movlw	4
   645  0713                     u135:	
   646  0713  1003               	clrc
   647  0714  0CF4               	rrf	??_lcd_set_position,f
   648  0715  3EFF               	addlw	-1
   649  0716  1D03               	skipz
   650  0717  2F13               	goto	u135
   651  0718  0874               	movf	??_lcd_set_position,w
   652  0719  390F               	andlw	15
   653  071A  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   654                           
   655                           ;lcd.c: 71: lcd_cmd(pos & 0x0F);
   656  071F  0876               	movf	lcd_set_position@pos,w
   657  0720  390F               	andlw	15
   658  0721  120A  118A  268E   	fcall	_lcd_cmd
   659  0724  0008               	return
   660  0725                     __end_of_lcd_set_position:	
   661                           ;lcd.c: 72: }
   662                           ;lcd.c: 73: return 0;
   663                           ;	Return value of _lcd_set_position is never used
   664                           
   665                           
   666                           	psect	text2
   667  06B1                     __ptext2:	
   668 ;; *************** function _lcd_init *****************
   669 ;; Defined at:
   670 ;;		line 3 in file "C:\Users\Aluno\Desktop\PortableGit\ecai11\C\dc-motor-control\code\lcd.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      unsigned char 
   677 ;; Registers used:
   678 ;;		wreg, status,2, status,0, pclath, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   684 ;;      Params:         0       0       0       0       0
   685 ;;      Locals:         0       0       0       0       0
   686 ;;      Temps:          2       0       0       0       0
   687 ;;      Totals:         2       0       0       0       0
   688 ;;Total ram usage:        2 bytes
   689 ;; Hardware stack levels used:    1
   690 ;; Hardware stack levels required when called:    1
   691 ;; This function calls:
   692 ;;		_lcd_cmd
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           
   699                           ;psect for function _lcd_init
   700  06B1                     _lcd_init:	
   701                           
   702                           ;lcd.c: 5: _delay((unsigned long)((40)*(4000000/4000.0)));
   703                           
   704                           ;incstack = 0
   705                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   706  06B1  3034               	movlw	52
   707  06B2  00F4               	movwf	??_lcd_init+1
   708  06B3  30F1               	movlw	241
   709  06B4  00F3               	movwf	??_lcd_init
   710  06B5                     u217:	
   711  06B5  0BF3               	decfsz	??_lcd_init,f
   712  06B6  2EB5               	goto	u217
   713  06B7  0BF4               	decfsz	??_lcd_init+1,f
   714  06B8  2EB5               	goto	u217
   715  06B9  2EBA               	nop2
   716                           
   717                           ;lcd.c: 6: TRISB = 0x00;
   718  06BA  1683               	bsf	3,5	;RP0=1, select bank1
   719  06BB  1303               	bcf	3,6	;RP1=0, select bank1
   720  06BC  0186               	clrf	6	;volatile
   721                           
   722                           ;lcd.c: 7: ANSELH = 0x00;
   723  06BD  1683               	bsf	3,5	;RP0=1, select bank3
   724  06BE  1703               	bsf	3,6	;RP1=1, select bank3
   725  06BF  0189               	clrf	9	;volatile
   726                           
   727                           ;lcd.c: 8: lcd_cmd(0x02);
   728  06C0  3002               	movlw	2
   729  06C1  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   730                           
   731                           ;lcd.c: 9: lcd_cmd(0x02);
   732  06C6  3002               	movlw	2
   733  06C7  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   734                           
   735                           ;lcd.c: 10: lcd_cmd(0x08);
   736  06CC  3008               	movlw	8
   737  06CD  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   738                           
   739                           ;lcd.c: 11: lcd_cmd(0x00);
   740  06D2  3000               	movlw	0
   741  06D3  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   742                           
   743                           ;lcd.c: 12: lcd_cmd(0x0C);
   744  06D8  300C               	movlw	12
   745  06D9  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   746                           
   747                           ;lcd.c: 13: lcd_cmd(0x00);
   748  06DE  3000               	movlw	0
   749  06DF  120A  118A  268E  120A  118A  	fcall	_lcd_cmd
   750                           
   751                           ;lcd.c: 14: lcd_cmd(0x06);
   752  06E4  3006               	movlw	6
   753  06E5  120A  118A  268E   	fcall	_lcd_cmd
   754  06E8  0008               	return
   755  06E9                     __end_of_lcd_init:	
   756                           ;lcd.c: 16: return 0;
   757                           ;	Return value of _lcd_init is never used
   758                           
   759                           
   760                           	psect	text3
   761  068E                     __ptext3:	
   762 ;; *************** function _lcd_cmd *****************
   763 ;; Defined at:
   764 ;;		line 21 in file "C:\Users\Aluno\Desktop\PortableGit\ecai11\C\dc-motor-control\code\lcd.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;  cmd             1    wreg     unsigned char 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  cmd             1    2[COMMON] unsigned char 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      unsigned char 
   771 ;; Registers used:
   772 ;;		wreg, status,2, status,0
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   778 ;;      Params:         0       0       0       0       0
   779 ;;      Locals:         1       0       0       0       0
   780 ;;      Temps:          2       0       0       0       0
   781 ;;      Totals:         3       0       0       0       0
   782 ;;Total ram usage:        3 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; This function calls:
   785 ;;		Nothing
   786 ;; This function is called by:
   787 ;;		_lcd_init
   788 ;;		_lcd_set_position
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           
   793                           ;psect for function _lcd_cmd
   794  068E                     _lcd_cmd:	
   795                           
   796                           ;incstack = 0
   797                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0]
   798                           ;lcd_cmd@cmd stored from wreg
   799  068E  00F2               	movwf	lcd_cmd@cmd
   800                           
   801                           ;lcd.c: 23: PORTB = cmd;
   802  068F  0872               	movf	lcd_cmd@cmd,w
   803  0690  1283               	bcf	3,5	;RP0=0, select bank0
   804  0691  1303               	bcf	3,6	;RP1=0, select bank0
   805  0692  0086               	movwf	6	;volatile
   806                           
   807                           ;lcd.c: 24: PORTB &= ~(1<<4);
   808  0693  30EF               	movlw	239
   809  0694  00F0               	movwf	??_lcd_cmd
   810  0695  0870               	movf	??_lcd_cmd,w
   811  0696  0586               	andwf	6,f	;volatile
   812                           
   813                           ;lcd.c: 25: PORTB |= (1<<5);
   814  0697  1686               	bsf	6,5	;volatile
   815                           
   816                           ;lcd.c: 26: _delay((unsigned long)((2)*(4000000/4000.0)));
   817  0698  3003               	movlw	3
   818  0699  00F1               	movwf	??_lcd_cmd+1
   819  069A  3097               	movlw	151
   820  069B  00F0               	movwf	??_lcd_cmd
   821  069C                     u227:	
   822  069C  0BF0               	decfsz	??_lcd_cmd,f
   823  069D  2E9C               	goto	u227
   824  069E  0BF1               	decfsz	??_lcd_cmd+1,f
   825  069F  2E9C               	goto	u227
   826  06A0  2EA1               	nop2
   827                           
   828                           ;lcd.c: 27: PORTB &= ~(1<<5);
   829  06A1  30DF               	movlw	223
   830  06A2  00F0               	movwf	??_lcd_cmd
   831  06A3  0870               	movf	??_lcd_cmd,w
   832  06A4  1283               	bcf	3,5	;RP0=0, select bank0
   833  06A5  1303               	bcf	3,6	;RP1=0, select bank0
   834  06A6  0586               	andwf	6,f	;volatile
   835                           
   836                           ;lcd.c: 28: _delay((unsigned long)((2)*(4000000/4000.0)));
   837  06A7  3003               	movlw	3
   838  06A8  00F1               	movwf	??_lcd_cmd+1
   839  06A9  3097               	movlw	151
   840  06AA  00F0               	movwf	??_lcd_cmd
   841  06AB                     u237:	
   842  06AB  0BF0               	decfsz	??_lcd_cmd,f
   843  06AC  2EAB               	goto	u237
   844  06AD  0BF1               	decfsz	??_lcd_cmd+1,f
   845  06AE  2EAB               	goto	u237
   846  06AF  2EB0               	nop2
   847  06B0  0008               	return
   848  06B1                     __end_of_lcd_cmd:	
   849                           ;lcd.c: 29: return 0;
   850                           ;	Return value of _lcd_cmd is never used
   851                           
   852                           
   853                           	psect	text4
   854  0725                     __ptext4:	
   855 ;; *************** function _lcd_data *****************
   856 ;; Defined at:
   857 ;;		line 33 in file "C:\Users\Aluno\Desktop\PortableGit\ecai11\C\dc-motor-control\code\lcd.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  data            1    wreg     unsigned char 
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  data            1    4[COMMON] unsigned char 
   862 ;;  high_nibble     1    3[COMMON] unsigned char 
   863 ;;  low_nibble      1    2[COMMON] unsigned char 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      unsigned char 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   873 ;;      Params:         0       0       0       0       0
   874 ;;      Locals:         3       0       0       0       0
   875 ;;      Temps:          2       0       0       0       0
   876 ;;      Totals:         5       0       0       0       0
   877 ;;Total ram usage:        5 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; This function calls:
   880 ;;		Nothing
   881 ;; This function is called by:
   882 ;;		_main
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           
   887                           ;psect for function _lcd_data
   888  0725                     _lcd_data:	
   889                           
   890                           ;incstack = 0
   891                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
   892                           ;lcd_data@data stored from wreg
   893  0725  00F4               	movwf	lcd_data@data
   894                           
   895                           ;lcd.c: 35: uint8_t high_nibble;
   896                           ;lcd.c: 36: uint8_t low_nibble;
   897                           ;lcd.c: 38: high_nibble = data >> 4;
   898  0726  0874               	movf	lcd_data@data,w
   899  0727  00F0               	movwf	??_lcd_data
   900  0728  3004               	movlw	4
   901  0729                     u15:	
   902  0729  1003               	clrc
   903  072A  0CF0               	rrf	??_lcd_data,f
   904  072B  3EFF               	addlw	-1
   905  072C  1D03               	skipz
   906  072D  2F29               	goto	u15
   907  072E  0870               	movf	??_lcd_data,w
   908  072F  00F1               	movwf	??_lcd_data+1
   909  0730  0871               	movf	??_lcd_data+1,w
   910  0731  00F3               	movwf	lcd_data@high_nibble
   911                           
   912                           ;lcd.c: 39: high_nibble &= 0x0F;
   913  0732  300F               	movlw	15
   914  0733  00F0               	movwf	??_lcd_data
   915  0734  0870               	movf	??_lcd_data,w
   916  0735  05F3               	andwf	lcd_data@high_nibble,f
   917                           
   918                           ;lcd.c: 41: low_nibble = data & 0x0F;
   919  0736  0874               	movf	lcd_data@data,w
   920  0737  390F               	andlw	15
   921  0738  00F0               	movwf	??_lcd_data
   922  0739  0870               	movf	??_lcd_data,w
   923  073A  00F2               	movwf	lcd_data@low_nibble
   924                           
   925                           ;lcd.c: 42: PORTB = high_nibble;
   926  073B  0873               	movf	lcd_data@high_nibble,w
   927  073C  1283               	bcf	3,5	;RP0=0, select bank0
   928  073D  1303               	bcf	3,6	;RP1=0, select bank0
   929  073E  0086               	movwf	6	;volatile
   930                           
   931                           ;lcd.c: 43: PORTB |= (1<<4);
   932  073F  1606               	bsf	6,4	;volatile
   933                           
   934                           ;lcd.c: 44: PORTB |= (1<<5);
   935  0740  1686               	bsf	6,5	;volatile
   936                           
   937                           ;lcd.c: 45: _delay((unsigned long)((2)*(4000000/4000.0)));
   938  0741  3003               	movlw	3
   939  0742  00F1               	movwf	??_lcd_data+1
   940  0743  3097               	movlw	151
   941  0744  00F0               	movwf	??_lcd_data
   942  0745                     u247:	
   943  0745  0BF0               	decfsz	??_lcd_data,f
   944  0746  2F45               	goto	u247
   945  0747  0BF1               	decfsz	??_lcd_data+1,f
   946  0748  2F45               	goto	u247
   947  0749  2F4A               	nop2
   948                           
   949                           ;lcd.c: 46: PORTB &= ~(1<<5);
   950  074A  30DF               	movlw	223
   951  074B  00F0               	movwf	??_lcd_data
   952  074C  0870               	movf	??_lcd_data,w
   953  074D  1283               	bcf	3,5	;RP0=0, select bank0
   954  074E  1303               	bcf	3,6	;RP1=0, select bank0
   955  074F  0586               	andwf	6,f	;volatile
   956                           
   957                           ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
   958  0750  3003               	movlw	3
   959  0751  00F1               	movwf	??_lcd_data+1
   960  0752  3097               	movlw	151
   961  0753  00F0               	movwf	??_lcd_data
   962  0754                     u257:	
   963  0754  0BF0               	decfsz	??_lcd_data,f
   964  0755  2F54               	goto	u257
   965  0756  0BF1               	decfsz	??_lcd_data+1,f
   966  0757  2F54               	goto	u257
   967  0758  2F59               	nop2
   968                           
   969                           ;lcd.c: 49: PORTB = low_nibble;
   970  0759  0872               	movf	lcd_data@low_nibble,w
   971  075A  1283               	bcf	3,5	;RP0=0, select bank0
   972  075B  1303               	bcf	3,6	;RP1=0, select bank0
   973  075C  0086               	movwf	6	;volatile
   974                           
   975                           ;lcd.c: 50: PORTB |= (1<<4);
   976  075D  1606               	bsf	6,4	;volatile
   977                           
   978                           ;lcd.c: 51: PORTB |= (1<<5);
   979  075E  1686               	bsf	6,5	;volatile
   980                           
   981                           ;lcd.c: 52: _delay((unsigned long)((2)*(4000000/4000.0)));
   982  075F  3003               	movlw	3
   983  0760  00F1               	movwf	??_lcd_data+1
   984  0761  3097               	movlw	151
   985  0762  00F0               	movwf	??_lcd_data
   986  0763                     u267:	
   987  0763  0BF0               	decfsz	??_lcd_data,f
   988  0764  2F63               	goto	u267
   989  0765  0BF1               	decfsz	??_lcd_data+1,f
   990  0766  2F63               	goto	u267
   991  0767  2F68               	nop2
   992                           
   993                           ;lcd.c: 53: PORTB &= ~(1<<5);
   994  0768  30DF               	movlw	223
   995  0769  00F0               	movwf	??_lcd_data
   996  076A  0870               	movf	??_lcd_data,w
   997  076B  1283               	bcf	3,5	;RP0=0, select bank0
   998  076C  1303               	bcf	3,6	;RP1=0, select bank0
   999  076D  0586               	andwf	6,f	;volatile
  1000                           
  1001                           ;lcd.c: 54: _delay((unsigned long)((2)*(4000000/4000.0)));
  1002  076E  3003               	movlw	3
  1003  076F  00F1               	movwf	??_lcd_data+1
  1004  0770  3097               	movlw	151
  1005  0771  00F0               	movwf	??_lcd_data
  1006  0772                     u277:	
  1007  0772  0BF0               	decfsz	??_lcd_data,f
  1008  0773  2F72               	goto	u277
  1009  0774  0BF1               	decfsz	??_lcd_data+1,f
  1010  0775  2F72               	goto	u277
  1011  0776  2F77               	nop2
  1012  0777  0008               	return
  1013  0778                     __end_of_lcd_data:	
  1014                           ;lcd.c: 56: return 0;
  1015                           ;	Return value of _lcd_data is never used
  1016                           
  1017                           
  1018                           	psect	text5
  1019  066D                     __ptext5:	
  1020 ;; *************** function ___wmul *****************
  1021 ;; Defined at:
  1022 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  multiplier      2    0[COMMON] unsigned int 
  1025 ;;  multiplicand    2    2[COMMON] unsigned int 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  product         2    4[COMMON] unsigned int 
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  2    0[COMMON] unsigned int 
  1030 ;; Registers used:
  1031 ;;		wreg, status,2, status,0
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1037 ;;      Params:         4       0       0       0       0
  1038 ;;      Locals:         2       0       0       0       0
  1039 ;;      Temps:          0       0       0       0       0
  1040 ;;      Totals:         6       0       0       0       0
  1041 ;;Total ram usage:        6 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           
  1051                           ;psect for function ___wmul
  1052  066D                     ___wmul:	
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1056  066D  01F4               	clrf	___wmul@product
  1057  066E  01F5               	clrf	___wmul@product+1
  1058  066F                     l701:	
  1059  066F  1C70               	btfss	___wmul@multiplier,0
  1060  0670  2E77               	goto	l161
  1061  0671  0872               	movf	___wmul@multiplicand,w
  1062  0672  07F4               	addwf	___wmul@product,f
  1063  0673  1803               	skipnc
  1064  0674  0AF5               	incf	___wmul@product+1,f
  1065  0675  0873               	movf	___wmul@multiplicand+1,w
  1066  0676  07F5               	addwf	___wmul@product+1,f
  1067  0677                     l161:	
  1068  0677  3001               	movlw	1
  1069  0678                     u155:	
  1070  0678  1003               	clrc
  1071  0679  0DF2               	rlf	___wmul@multiplicand,f
  1072  067A  0DF3               	rlf	___wmul@multiplicand+1,f
  1073  067B  3EFF               	addlw	-1
  1074  067C  1D03               	skipz
  1075  067D  2E78               	goto	u155
  1076  067E  3001               	movlw	1
  1077  067F                     u165:	
  1078  067F  1003               	clrc
  1079  0680  0CF1               	rrf	___wmul@multiplier+1,f
  1080  0681  0CF0               	rrf	___wmul@multiplier,f
  1081  0682  3EFF               	addlw	-1
  1082  0683  1D03               	skipz
  1083  0684  2E7F               	goto	u165
  1084  0685  0870               	movf	___wmul@multiplier,w
  1085  0686  0471               	iorwf	___wmul@multiplier+1,w
  1086  0687  1D03               	btfss	3,2
  1087  0688  2E6F               	goto	l701
  1088  0689  0875               	movf	___wmul@product+1,w
  1089  068A  00F1               	movwf	?___wmul+1
  1090  068B  0874               	movf	___wmul@product,w
  1091  068C  00F0               	movwf	?___wmul
  1092  068D  0008               	return
  1093  068E                     __end_of___wmul:	
  1094  007E                     btemp	set	126	;btemp
  1095  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80      0       3
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_lcd_set_position
    _lcd_set_position->_lcd_cmd
    _lcd_init->_lcd_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     500
                                              7 COMMON     2     2      0
                             ___wmul
                           _lcd_data
                           _lcd_init
                   _lcd_set_position
 ---------------------------------------------------------------------------------
 (1) _lcd_set_position                                     4     3      1     227
                                              3 COMMON     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      15
                                              3 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             5     5      0      60
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _lcd_data
   _lcd_init
     _lcd_cmd
   _lcd_set_position
     _lcd_cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       3       5        3.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       F      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 18 10:53:04 2020

             lcd_data@data 0074                         l44 07C6                         u15 0729  
      ___wmul@multiplicand 0072                        l161 0677                        l701 066F  
                      l751 07F0                        l739 07C3                        l749 07EA  
                      l689 0708                        u125 06F6                        u135 0713  
                      u207 078F                        u217 06B5                        u155 0678  
                      u227 069C                        u165 067F                        u237 06AB  
                      _PR2 0092                        u247 0745                        u257 0754  
                      u267 0763                        u277 0772                        _pos 007B  
      lcd_data@high_nibble 0073                       _main 0778                       btemp 007E  
                     start 0000                      ?_main 0070                      _ANSEL 0188  
                    _T2CON 0012                      _PORTB 0006                      _PORTD 0008  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088            __end_of_lcd_cmd 06B1                      _valor 0079  
                    status 0003                      wtemp0 007E            __initialization 07F4  
             __end_of_main 07F4                     ??_main 0077                     _ADCON0 001F  
                   _ADCON1 009F          ?_lcd_set_position 0073                     _ADRESH 001E  
                   _ADRESL 009E                     _CCPR1L 0015                     _ANSELH 0189  
       ??_lcd_set_position 0074           __end_of_lcd_data 0778           __end_of_lcd_init 06E9  
                   ___wmul 066D                  ??_lcd_cmd 0070    __end_of__initialization 07FC  
           __pcstackCOMMON 0070                 __pbssBANK0 0020                 __pmaintext 0778  
                  ?___wmul 0070                    _CCP1CON 0017                  ?_lcd_data 0070  
                ?_lcd_init 0070            __size_of___wmul 0021                    __ptext1 06E9  
                  __ptext2 06B1                    __ptext3 068E                    __ptext4 0725  
                  __ptext5 066D                    _lcd_cmd 068E                    _valor_f 0020  
               ??_lcd_data 0070                 ??_lcd_init 0073       end_of_initialization 07FC  
__size_of_lcd_set_position 003C                 lcd_cmd@cmd 0072             __end_of___wmul 068E  
      start_initialization 07F4                   ??___wmul 0074         lcd_data@low_nibble 0072  
              __pbssCOMMON 0079                  ___latbits 0002          __size_of_lcd_data 0053  
        __size_of_lcd_init 0038           _lcd_set_position 06E9                   ?_lcd_cmd 0070  
           ___wmul@product 0074          ___wmul@multiplier 0070           __size_of_lcd_cmd 0023  
                 _lcd_data 0725                   _lcd_init 06B1              __size_of_main 007C  
 __end_of_lcd_set_position 0725        lcd_set_position@pos 0076          lcd_set_position@x 0075  
        lcd_set_position@y 0073  
